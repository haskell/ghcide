jobs:
- job: ghcide_stack_windows
  timeoutInMinutes: 60
  pool:
    vmImage: 'windows-2019'
  strategy:
    matrix:
      stack_810:
        STACK_YAML: "stack810.yaml"
      stack_88:
        STACK_YAML: "stack88.yaml"
      stack_86:
        STACK_YAML: "stack.yaml"
      stack_84:
        STACK_YAML: "stack84.yaml"
      stack_ghc_lib_88:
        STACK_YAML: "stack-ghc-lib.yaml"
  variables:
      STACK_ROOT: "C:\\sr"
  steps:
  - checkout: self
  - task: Cache@2
    inputs:
      key: stack-cache-v2 | $(Agent.OS) | $(Build.SourcesDirectory)/$(STACK_YAML) | $(Build.SourcesDirectory)/ghcide.cabal
      path: .azure-cache
      cacheHitVar: CACHE_RESTORED
    displayName: "Cache stack artifacts"
  - bash: |
      mkdir -p $STACK_ROOT
      tar -vxzf .azure-cache/stack-root.tar.gz -C /c
      mkdir -p .stack-work
      tar -vxzf .azure-cache/stack-work.tar.gz
    displayName: "Unpack cache"
    condition: eq(variables.CACHE_RESTORED, 'true')
  - bash: |
      ./fmt.sh
    displayName: "HLint via ./fmt.sh"
  - bash: |
      curl -sSkL http://www.stackage.org/stack/windows-x86_64 -o /usr/bin/stack.zip
      unzip -o /usr/bin/stack.zip -d /usr/bin/
      mkdir -p "$STACK_ROOT"
    displayName: 'Install Stack'
  - bash: stack setup --stack-yaml $STACK_YAML
    displayName: 'stack setup'
  - bash: |
      # Installing happy and alex standalone to avoid error "strip.exe: unable to rename ../*.exe; reason: File exists"
      stack install happy --stack-yaml $STACK_YAML
      stack install alex --stack-yaml $STACK_YAML
      stack build --only-dependencies --stack-yaml $STACK_YAML
    displayName: 'stack build --only-dependencies'
  - bash: stack test --no-run-tests --ghc-options=-Werror --stack-yaml $STACK_YAML
    displayName: 'stack test --ghc-options=-Werror'
    # TODO: run test suite when failing tests are fixed or marked as broken. See https://github.com/digital-asset/ghcide/issues/474
  - bash: |
      mkdir -p .azure-cache
      tar -vczf .azure-cache/stack-root.tar.gz $(cygpath $STACK_ROOT)
      tar -vczf .azure-cache/stack-work.tar.gz .stack-work
    displayName: "Pack cache"
  - bash: |
      set -euo pipefail
      MESSAGE=$(git log --pretty=format:%s -n1)
      curl -XPOST \
           -i \
           -H 'Content-type: application/json' \
           --data "{\"text\":\"<!here> *FAILED* $(Agent.JobName): <https://dev.azure.com/digitalasset/ghcide/_build/results?buildId=$(Build.BuildId)|$MESSAGE>\n\"}" \
           $(Slack.URL)
    condition: and(failed(), eq(variables['Build.SourceBranchName'], 'master'))
