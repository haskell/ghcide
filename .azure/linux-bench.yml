jobs:
- job: ghcide_bench_linux
  timeoutInMinutes: 120
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      stack:
        STACK_YAML: "stack.yaml"
  variables:
      STACK_ROOT: $(Pipeline.Workspace)/.stack
  steps:
  - checkout: self
  - task: Cache@2
    inputs:
      key: stack-root-cache | $(Agent.OS) | $(Build.SourcesDirectory)/$(STACK_YAML) | $(Build.SourcesDirectory)/ghcide.cabal
      path: $(STACK_ROOT)
      cacheHitVar: STACK_ROOT_CACHE_RESTORED
    displayName: "Cache stack root"
  - task: Cache@2
    inputs:
      key: stack-work-cache | $(Agent.OS) | $(Build.SourcesDirectory)/$(STACK_YAML) | $(Build.SourcesDirectory)/ghcide.cabal
      path: .stack-work
      cacheHitVar: STACK_WORK_CACHE_RESTORED
    displayName: "Cache stack work"
  - bash: |
      sudo add-apt-repository ppa:hvr/ghc
      sudo apt-get update
      sudo apt-get install -y g++ gcc libc6-dev libffi-dev libgmp-dev zlib1g-dev
      if ! which stack >/dev/null 2>&1; then
         curl -sSL https://get.haskellstack.org/ | sh
      fi
      mkdir -p $STACK_ROOT
    displayName: 'Install Stack'
  - bash: stack setup --stack-yaml=$STACK_YAML
    displayName: 'stack setup'
  - bash: stack build --bench --only-dependencies --stack-yaml=$STACK_YAML
    displayName: 'stack build --bench --only-dependencies'
  - bash: |
      export PATH=/opt/cabal/bin:$PATH
      # Retry to avoid fpcomplete servers timeouts
      stack bench --ghc-options=-Werror --stack-yaml=$STACK_YAML || stack bench --ghc-options=-Werror --stack-yaml=$STACK_YAML  || stack bench --ghc-options=-Werror --stack-yaml=$STACK_YAML
    displayName: 'stack bench --ghc-options=-Werror'
  - bash: |
      cat bench-results/results.csv
    displayName: "cat results"
  - publish: bench-results
    artifact: benchmarks
    displayName: "publish"
